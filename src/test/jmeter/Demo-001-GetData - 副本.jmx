<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Get-Orders-Data" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get-Orders-Data" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1405991209000</longProp>
        <longProp name="ThreadGroup.end_time">1405991209000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="flagIndicator" elementType="Argument">
              <stringProp name="Argument.name">flagIndicator</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc">用户定义标识</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InterfaceType" elementType="Argument">
              <stringProp name="Argument.name">InterfaceType</stringProp>
              <stringProp name="Argument.value">Get</stringProp>
              <stringProp name="Argument.desc">查询类/修改类  Get|Modify</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FAT" elementType="Argument">
              <stringProp name="Argument.name">FAT</stringProp>
              <stringProp name="Argument.value">ct.fat4.qa.nt.ctripcorp.com//switchapi</stringProp>
              <stringProp name="Argument.desc">测试环境host地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UAT" elementType="Argument">
              <stringProp name="Argument.name">UAT</stringProp>
              <stringProp name="Argument.value">ct.uat.qa.nt.ctripcorp.com//switchapi</stringProp>
              <stringProp name="Argument.desc">集成测试环境</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRO" elementType="Argument">
              <stringProp name="Argument.name">PRO</stringProp>
              <stringProp name="Argument.value">ct.pro.qa.nt.ctripcorp.com//switchapi</stringProp>
              <stringProp name="Argument.desc">生产环境</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TestName" elementType="Argument">
              <stringProp name="Argument.name">TestName</stringProp>
              <stringProp name="Argument.value">获取订单信息(按订单返回数据)</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">测试脚本名称</stringProp>
            </elementProp>
            <elementProp name="TestDataFileName" elementType="Argument">
              <stringProp name="Argument.name">TestDataFileName</stringProp>
              <stringProp name="Argument.value">获取订单信息(按订单返回数据).csv</stringProp>
              <stringProp name="Argument.desc">测试数据文件</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">${__P(run.environment,FAT)}</stringProp>
              <stringProp name="Argument.desc">FAT|UAT|PRO</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="FlightDB-连接" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">FlightDB</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://fltorder.db.${Environment}.qa.nt.ctripcorp.com:55666;databaseName=master</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">corptester@Ctrip.Com</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">uapp_corptester</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="HotelDB-连接" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">HotelDB-${Environment}</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://hoteldb.${Environment}.qa.nt.ctripcorp.com:55888;databaseName=master;integratedSecurity=true</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Cisco1989963</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cdzhang</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">FlightDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from fltorderdb..o_orders</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="用表格察看结果" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">..\results\Testing.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-保存结果-查询数据库" enabled="true">
        <stringProp name="TestPlan.comments">保存数据库查询结果</stringProp>
      </GenericController>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="生成数据库查询次数" enabled="true">
          <stringProp name="BeanShellSampler.query">System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.ctrip.automation.common.GetResultFromString;


String sqlString=vars.get(&quot;SQL&quot;).toString();
int sqlNum=0;
List sqlList=new ArrayList();
if(!sqlString.equals(&quot;&quot;))
{
sqlString=sqlString.substring(0,sqlString.length());
GetResultFromString stringToArray=new GetResultFromString();
String [] array=stringToArray.getArray(sqlString,&quot;\\\|&quot;);
sqlList=Arrays.asList(array);
sqlNum=sqlList.size();
}

vars.put(&quot;sqlNum&quot;,Integer.toString(sqlNum));
vars.putObject(&quot;sqlList&quot;,sqlList);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${sqlNum}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">${sqlNum}-1</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="计数器-生成数据库查询循环计数器-${sqlNum}" enabled="true">
            <stringProp name="BeanShellSampler.query"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);


 
//vars.put(&quot;sqlNum&quot;,Integer.toString(${sqlNum}-1));
vars.put(&quot;Counter&quot;,Integer.toString(${sqlNum}-1));
//vars.put(&quot;Counter&quot;,Integer.toString(${__counter(true,)}-1));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-${Counter}" enabled="true">
            <stringProp name="dataSource">FlightDB-${Environment}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">${__eval(${sqlTemp})}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">reserved</stringProp>
            <stringProp name="resultVariable">queryResult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="处理数据库查询请求参数" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">muserdb</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label+&quot;=====第${Counter}次循环&quot;);
import java.util.List;
import java.util.ArrayList;

List sqlListTemp=new ArrayList();
sqlListTemp=vars.getObject(&quot;sqlList&quot;);
sqlListTemp=${__eval(sqlListTemp)};
vars.put(&quot;sqlTemp&quot;,sqlListTemp.get(${Counter}).toString());


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="保存数据库查询结果参数" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label+&quot;=====第${Counter}次循环&quot;);
import java.util.List;
import java.util.ArrayList;


List tempResult=new ArrayList();
tempResult=vars.getObject(&quot;dbResult&quot;);
tempResult.add(vars.getObject(&quot;queryResult&quot;));
vars.putObject(&quot;dbResult&quot;,tempResult);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
        <stringProp name="SwitchController.value">${TestName}</stringProp>
      </SwitchController>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="验证身份" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--验证身份-${TestPoint}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.common.JsonToHashMap;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取公司信息" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取公司信息-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取公司ID-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{ &quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;GroupId&quot;:${GroupId},&quot;Source&quot;:&quot;${Source}&quot;,&quot;Company&quot;:&quot;${Company}&quot;,&quot;PageNo&quot;:${PageNo}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/QueryCompanies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;UTF-8&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;QueryCompaniesResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;QueryCompaniesResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;QueryCompaniesResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取结算信息" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{&quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;Start&quot;:&quot;${Start}&quot;,&quot;Days&quot;:&quot;${Days}&quot;,&quot;CorpId&quot;:&quot;${CorpId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/GetTransactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;GetTransactionsResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;GetTransactionsResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;GetTransactionsResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取订单信息(按订单返回数据)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取订单信息-按订单-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;
import com.ctrip.automation.common.GetValueFromHashMap;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;UTF-8&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
GetValueFromHashMap getResult=new GetValueFromHashMap();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();
System.out.println(getResult.getValue(&quot;Ticket&quot;,responseMap));
vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取订单信息-按订单-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{&quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;JourneyNo&quot;:&quot;${JourneyNo}&quot;}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/order.svc/rest/SearchOrder</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;UTF-8&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String respCode=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String respDesc=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String respStatus=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

//put original result to dbresult
//vars.putObject(&quot;originalList&quot;,responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;ItineraryList&quot;).get(0).get(&quot;FlightOrderInfoList&quot;));
System.out.println(&quot;****************输出接口返回部分内容****************&quot;);
//System.out.println(responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;ItineraryList&quot;).get(0).get(&quot;FlightOrderInfoList&quot;));



if(!respCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!respDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望响应信息是:&quot;+&quot;${Message}&quot;+&quot;  实际应响应信息是&quot;+RespDesc;
}

if(!respStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望结果是:&quot;+&quot;${Success}&quot;+&quot;  实际结果是&quot;+RespStatus;
}

//override original list
List originalListTemp=new ArrayList();
List originalList=new ArrayList();

originalListTemp=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;ItineraryList&quot;);
originalList.add(originalListTemp);
System.out.println(originalList.get(0).get(0)+&quot;=======================&quot;);
vars.putObject(&quot;originalList&quot;,originalList);
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取订单信息(按人乘返回数据)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{&quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;JourneyNo&quot;:&quot;${JourneyNo}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/order.svc/rest//SearchOrderPerPerson</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMapFastJson;


HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMapFastJson js=new JsonToHashMapFastJson();
responseMap=js.jsonToHashMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;SearchOrderPerPersonResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;SearchOrderPerPersonResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;SearchOrderPerPersonResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
