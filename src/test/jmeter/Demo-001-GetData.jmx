<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1405991209000</longProp>
        <longProp name="ThreadGroup.end_time">1405991209000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="flagIndicator" elementType="Argument">
              <stringProp name="Argument.name">flagIndicator</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc">用户定义标识</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InterfaceType" elementType="Argument">
              <stringProp name="Argument.name">InterfaceType</stringProp>
              <stringProp name="Argument.value">查询类</stringProp>
              <stringProp name="Argument.desc">查询类/修改类</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FAT" elementType="Argument">
              <stringProp name="Argument.name">FAT</stringProp>
              <stringProp name="Argument.value">ct.fat4.qa.nt.ctripcorp.com//switchapi</stringProp>
              <stringProp name="Argument.desc">测试环境host地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UAT" elementType="Argument">
              <stringProp name="Argument.name">UAT</stringProp>
              <stringProp name="Argument.value">ct.uat.qa.nt.ctripcorp.com//switchapi</stringProp>
              <stringProp name="Argument.desc">集成测试环境</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRO" elementType="Argument">
              <stringProp name="Argument.name">PRO</stringProp>
              <stringProp name="Argument.value">ct.pro.qa.nt.ctripcorp.com//switchapi</stringProp>
              <stringProp name="Argument.desc">生产环境</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TestName" elementType="Argument">
              <stringProp name="Argument.name">TestName</stringProp>
              <stringProp name="Argument.value">获取订单信息(按订单返回数据)</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">测试脚本名称</stringProp>
            </elementProp>
            <elementProp name="TestDataFileName" elementType="Argument">
              <stringProp name="Argument.name">TestDataFileName</stringProp>
              <stringProp name="Argument.value">获取订单信息(按订单返回数据).csv</stringProp>
              <stringProp name="Argument.desc">测试数据文件</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">FAT</stringProp>
              <stringProp name="Argument.desc">FAT|UAT|PRO</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="读入数据文件-业务数据" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">gb2312</stringProp>
          <stringProp name="filename">config\config.csv</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="FlightDB-连接" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">FlightDB-${Environment}</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://flightdb.${Environment}.qa.nt.ctripcorp.com:55666;databaseName=master;integratedSecurity=true</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Cisco1989963</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cdzhang</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="HotelDB-连接" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">HotelDB-${Environment}</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://hoteldb.${Environment}.qa.nt.ctripcorp.com:55888;databaseName=master;integratedSecurity=true</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Cisco1989963</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cdzhang</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="初始化数据（测试报告相关）" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="insertScriptPath" elementType="Argument">
              <stringProp name="Argument.name">insertScriptPath</stringProp>
              <stringProp name="Argument.value">../06testScript/InsertResult.vbs</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">插入测试结果脚本路径</stringProp>
            </elementProp>
            <elementProp name="generateScriptPath" elementType="Argument">
              <stringProp name="Argument.name">generateScriptPath</stringProp>
              <stringProp name="Argument.value">../06testScript/GenerateReportFile.vbs</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">生成测试报告脚本路径</stringProp>
            </elementProp>
            <elementProp name="setReportFormatScriptPath" elementType="Argument">
              <stringProp name="Argument.name">setReportFormatScriptPath</stringProp>
              <stringProp name="Argument.value">../06testScript/SetReportFormat.vbs</stringProp>
              <stringProp name="Argument.desc">设置测试报告样式脚本路径</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="reportFileName" elementType="Argument">
              <stringProp name="Argument.name">reportFileName</stringProp>
              <stringProp name="Argument.value">${__time(YMDHMS,)}_Report.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">测试报告文件名称</stringProp>
            </elementProp>
            <elementProp name="reportSheetName" elementType="Argument">
              <stringProp name="Argument.name">reportSheetName</stringProp>
              <stringProp name="Argument.value">Test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="reportFilePath" elementType="Argument">
              <stringProp name="Argument.name">reportFilePath</stringProp>
              <stringProp name="Argument.value">results/</stringProp>
              <stringProp name="Argument.desc">测试报告相对路径</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sqlNum" elementType="Argument">
              <stringProp name="Argument.name">sqlNum</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sqlNumPrecondition" elementType="Argument">
              <stringProp name="Argument.name">sqlNumPrecondition</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="定义全局变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="request_Global" elementType="Argument">
              <stringProp name="Argument.name">request_Global</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">请求参数列表，初始为空</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="responseCode_Global" elementType="Argument">
              <stringProp name="Argument.name">responseCode_Global</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">应答码列表，初始为空</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="responseMessage_Global" elementType="Argument">
              <stringProp name="Argument.name">responseMessage_Global</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">应答信息，初始为空</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="regularExpress_Global" elementType="Argument">
              <stringProp name="Argument.name">regularExpress_Global</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">正则表达式提取应答码</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="01-生成测试报告文件" enabled="true">
          <stringProp name="TestPlan.comments">生成EXCEL文件用于保存对比结果</stringProp>
          <stringProp name="BeanShellSampler.query">System.out.println(&quot;------------当前脚本名称:===&quot;+Label);
	String paramStringGen=&quot;wscript&amp;${generateScriptPath}&amp;${reportFileName}&amp;${reportSheetName}&amp;${reportFilePath}&quot;;
	
	String [] param1=paramStringGen.split(&quot;\\\&amp;&quot;);;
	try {		
		Runtime.getRuntime().exec(param1);
		Thread.sleep(1000);
		} catch (IOException e) {
			
			e.printStackTrace();
		}




</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="读入数据文件-业务数据" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">gb2312</stringProp>
            <stringProp name="filename">..\\05testData\\${Environment}\\${TestDataFileName}</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames"></stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否执行用例" enabled="true">
            <stringProp name="IfController.condition">&quot;${Execute}&quot;==&quot;Y&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="保存参数至全局变量" enabled="true">
              <stringProp name="BeanShellSampler.query">System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);
import java.net.URLEncoder;
log.info(&quot;保存参数为全局变量&quot;);
import java.util.ArrayList;
import java.util.List;

List dbResult=new ArrayList();
vars.putObject(&quot;dbResult&quot;,dbResult);

//vars.put(&quot;FreezeOrdId&quot;,&quot;${__time(yyyymmddhhmmss,)}&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-前置条件-更新数据库" enabled="true">
              <stringProp name="TestPlan.comments">处理前置条件更新相应的数据库</stringProp>
            </GenericController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="前置条件处理" enabled="true">
                <stringProp name="BeanShellSampler.query">
System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);

import com.ctrip.automation.GetResultFromString;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;


if(!&quot;${PreCondition}&quot;.equals(&quot;&quot;))
{
 log.info(&quot;test---------&quot;);
GetResultFromString stringToArray=new GetResultFromString();
//通过分隔字符串得到数组

String [] sqlArray=stringToArray.getArray(&quot;${PreCondition}&quot;,&quot;\\\|&quot;);
List sqlListPrecondition=new ArrayList();
//将数组转换为list
sqlListPrecondition=Arrays.asList(sqlArray);
int sqlNumPrecondition=sqlListPrecondition.size();


vars.put(&quot;sqlNumPrecondition&quot;,Integer.toString(sqlNumPrecondition));
vars.putObject(&quot;sqlListPrecondition&quot;,sqlListPrecondition);


log.info(Integer.toString(sqlNumPrecondition)+&quot;---------------------------------------------------------&quot;);
}

</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器-执行所有的前置条件" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${sqlNumPrecondition}</stringProp>
              </LoopController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="循环次数计数器" enabled="true">
                  <stringProp name="BeanShellSampler.query">System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);
//vars.put(&quot;sqlNumPrecondition&quot;,Integer.toString(${sqlNumPrecondition}-1));
//vars.put(&quot;preCounter&quot;,Integer.toString(${sqlNumPrecondition}-1));
vars.put(&quot;preCounter&quot;,${__counter(true,)});</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="前置条件更新数据库-JDBC Request" enabled="true">
                  <stringProp name="dataSource">${jdbcVariable}</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">${__eval(${sqlTemp})}</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">reserved</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="生成数据库请求数据-PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label+&quot;第${preCounter}次循环&quot;);
import java.util.ArrayList;
import com.ctrip.automation.GetResultFromString;

ArrayList sqlListTemp=new ArrayList();
sqlListTemp=vars.getObject(&quot;sqlListPrecondition&quot;);

GetResultFromString splitList=new GetResultFromString();
String [] tempArray=splitList(sqlListTemp.get(${preCounter}),&quot;\\\;&quot;);
String sqlTemp=tempArray[0];
String jdbcVariable=tempArray[1];

vars.put(&quot;sqlTemp&quot;,sqlTemp);
vars.put(&quot;jdbcVariable&quot;,jdbcVariable);


</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器-查询请求之前数据库值" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="-1523062376">简单控制器-保存结果-查询数据库</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="保存请求之前查询的结果" enabled="true">
              <stringProp name="TestPlan.comments">保存结果并清空数组</stringProp>
              <stringProp name="BeanShellSampler.query">System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);
import java.util.List;
import java.util.ArrayList;
List originalList=new ArrayList();
originalList=vars.getObject(&quot;dbResult&quot;);
vars.putObject(&quot;originalList&quot;,originalList);
originalList.clear();
vars.putObject(&quot;dbResult&quot;,originalList);

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="-878946296">Switch Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器-查询请求之后数据库值" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="-1523062376">简单控制器-保存结果-查询数据库</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器-是否对比结果产生记录" enabled="true">
              <stringProp name="IfController.condition">&quot;${SQL}&quot;!=&quot;&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="处理请求之后查询并对比" enabled="true">
                <stringProp name="TestPlan.comments">保存结果并清空数组</stringProp>
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.math.BigDecimal;
import com.ctrip.automation.common.GetResultFromString;

public  insertCompareResult(String FiledName,String No, String expectedValue,String actualValue, String failure, String  selectString) {

		
		String paramString=&quot;wscript&amp;${insertScriptPath}&amp;${TCNo.}&amp;${TestPoint}&amp;&quot;+No+&quot;&amp;&quot;+FiledName+&quot;&amp;&quot;+actualValue+&quot;&amp;&quot;+expectedValue+&quot;&amp;&quot;+failure+&quot;&amp;&quot;+selectString+&quot;&amp;${reportFileName}&amp;${reportSheetName}&amp;${reportFilePath}&quot;;
		String [] parm=paramString.split(&quot;\\\&amp;&quot;);


			try {		
			
			Runtime.getRuntime().exec(parm);
			} catch (IOException e) {
				
				e.printStackTrace();
			}

				try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		
	}


public LogException(String No,String errorMsg)
{
	//IsSuccess=false;
	insertCompareResult(&quot;error&quot;,No,errorMsg,&quot;error&quot;,&quot;Failed&quot;,&quot;reserved&quot;);
	//SampleResult.setStopThread(true);  
}


boolean flag=false;
boolean logTable=false;

List actualList=new ArrayList();
List originalList=new ArrayList();
List sqlListResult=new ArrayList();

HashMap actualMap=new HashMap();


actualList=vars.getObject(&quot;dbResult&quot;);
originalList=vars.getObject(&quot;originalList&quot;);
sqlListResult=vars.getObject(&quot;sqlList&quot;);
vars.putObject(&quot;dbResult&quot;,&quot;&quot;);


GetResultFromString stringToArray=new GetResultFromString();
List checkFiledList=new ArrayList();
String checkFieldString=${__eval(&quot;${checkField}&quot;)};
checkFiledList=Arrays.asList(stringToArray.getArray(checkFieldString,&quot;\\\|&quot;));


if(actualList.size()!=checkFiledList.size())
{
	//IsSuccess = false;
	String msg=&quot;原始请求列表与检查字段列表不一致，请检查输入文件是否存在问题!原始请求结果条数:&quot;+actualList.size().toString()+&quot; 期望校验对应结果条数:&quot;+checkFiledList.size().toString();
	LogException(String.valueOf(i),msg);
	SampleResult.setStopThread(true);
	
	log.info(msg);
}

for(int i=0;i&lt;actualList.size();i++)
{
	
	String checkFiledTemp=checkFiledList.get(i).toString();
	if(checkFiledTemp.contains(&quot;(&quot;))
	{
		logTable=true;
		checkFiledTemp=checkFiledTemp.substring(1,checkFiledTemp.length()-1);

	}

	System.out.println(&quot;第&quot;+i+&quot;次对比，请求之前结果集为:---------&quot;+originalList.get(i)+&quot;\n\n&quot;);
	System.out.println(&quot;第&quot;+i+&quot;次对比，请求之后结果集为:---------&quot;+actualList.get(i)+&quot;\n\n&quot;);
	System.out.println(&quot;第&quot;+i+&quot;次对比，期望结果果集为:---------&quot;+checkFiledList.get(i)+&quot;\n&quot;);
	System.out.println(&quot;****************当前第&quot;+i+&quot;次循环,所要对比的字段包含:*********\n&quot;+checkFiledTemp);


	
	String [] fieldArray=stringToArray.getArray(checkFiledTemp,&quot;\\\;&quot;);
	for(int j=0;j&lt;fieldArray.length;j++)
	{
		boolean flagIndicator=false;
		String [] fieldArrayTemp=stringToArray.getArray(fieldArray[j],&quot;=&quot;);
		String fieldName=fieldArrayTemp[0];
		String fieldValue=fieldArrayTemp[1];

		String expected=&quot;&quot;;
		String actual=&quot;&quot;;
		String original=&quot;&quot;;


		System.out.println(&quot;======当前正在对比的是第&quot;+i+&quot;次循环，第&quot;+j+&quot;个检查字段对比的字段名称是:&quot;+fieldName+&quot; 对比的字段值是:&quot;+fieldValue+&quot;======\n&quot;);
		
		if(fieldName.equals(&quot;Original&quot;) &amp;&amp; fieldValue.equals(&quot;Current&quot;))
		{
				expected=&quot;Original   结果集太大，请查看输出&quot;;
				actual=&quot;Current      结果集太大，请查看输出&quot;;

			
			if(originalList.get(i)!=actualList.get(i))
			{
				flagIndicator=true;
				//IsSuccess=false;
				log.info(&quot;请求前数据库查询结果为：&quot;+originalList.get(i).toString()+&quot;请求之后数据库结果为&quot;+actualList.get(i).toString()+&quot;\n&quot;);
			}

		}
		
		if(logTable)
		{
			if(!actualList.get(i).get(0).containsKey(fieldName))
			{
				LogException(String.valueOf(i),&quot;实际数据库查询结果中不包含&quot;+fieldName+&quot;字段，请检查数据文件是否存在问题&quot;);
				actual=&quot;不包含所要检查的字段，请检查输入&quot;;
				flagIndicator=true;
			}
			else
			{
				actual=actualList.get(i).get(0).get(fieldName).toString()==null?&quot;&quot;:actualList.get(i).get(0).get(fieldName).toString();
				
				
			}
				expected=fieldValue;
			
			
			if(!actual.equals(fieldValue))
			{
				flagIndicator=true;
				//IsSuccess=false;
				log.info(&quot;期望结果为：&quot;+fieldValue.toString()+&quot;实际结果为&quot;+actual);
			}

			
		}
		
		else
		{
			
			 expected=fieldValue==null?&quot;0&quot;:fieldValue;
			 actual=actualList.get(i).get(0).get(fieldName)==null?&quot;0&quot;:actualList.get(i).get(0).get(fieldName).toString();
			 original=originalList.get(i).get(0).get(fieldName)==null?&quot;0&quot;:originalList.get(i).get(0).get(fieldName).toString();

			log.info(&quot;original=&quot;+original+&quot;=================expected=&quot;+expected+&quot;-----actual=&quot;+actual);
			
			if(expected.contains(&quot;+&quot;) || expected.contains(&quot;-&quot;))
			{

			Double expectedValue=Double.valueOf(original)+Double.valueOf(expected);
			BigDecimal a=BigDecimal.valueOf(expectedValue); 
               expectedValue=a.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();

			Double actualValue=Double.valueOf(actual);
			BigDecimal b=BigDecimal.valueOf(actualValue); 
               actualValue=b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();

               if(!expectedValue.toString().equals(actualValue.toString()))
               {
               	flagIndicator=true;
               	//IsSuccess=false;
				log.info(&quot;请求前数据库查询结果为：&quot;+originalList.get(i).toString()+&quot;请求之后数据库结果为&quot;+actualList.get(i).toString());
			}
			}
			else
			{
				
               if(!expected.toString().equals(actual.toString()))
               {
               	flagIndicator=true;
               	//IsSuccess=false;
				log.info(&quot;请求前数据库查询结果为：&quot;+originalList.get(i).toString()+&quot;请求之后数据库结果为&quot;+actualList.get(i).toString());
               }
			}

		}


		System.out.println(&quot;=========当前正在对比的是第&quot;+i+&quot;次循环，第&quot;+j+&quot;个检查字段对比完成=======&quot;+&quot;\n&quot;);
		System.out.println(&quot;%%%%%终于开始插入数据对比记录了%%%%%&quot;);
	 	String selectString=sqlListResult.get(i).toString();
	 	System.out.println(&quot;??????????????????++++++++++++&quot;+${JourneyNo});
	 	System.out.println(selectString);
		selectString=selectString.replace(&quot;&apos;&quot;,&quot;&quot;);
		
		String failureFlag=&quot;&quot;;
		String FiledName=fieldName;
		String expectedString=expected.toString();
		String actualString=actual.toString();
		String No=String.valueOf(i);
		     if(flagIndicator)
		     {
		     	failureFlag=&quot;Failed&quot;;
		  	}
		  	else
		  	{
		  		failureFlag=&quot;Passed&quot;;
		  	}
		flag=flagIndicator||flag;
          insertCompareResult(FiledName,No,actualString,expectedString,failureFlag,selectString);
             
		System.out.println(&quot;*****************当前正在对比的是第&quot;+i+&quot;次循环对比已完成**********&quot;+&quot;\n&quot;);
	}

logTable=false;
}
flag=!flag;
vars.put(&quot;flagIndicator&quot;,flag.toString());
System.out.println(&quot;请问你为何不继续往下走了&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="03-设置测试报告样式" enabled="true">
          <stringProp name="BeanShellSampler.query">	System.out.println(&quot;------------当前脚本名称:===&quot;+Label);
	String paramStringGen=&quot;wscript&amp;${setReportFormatScriptPath}&amp;${reportFileName}&amp;${reportSheetName}&amp;${reportFilePath}&quot;;
	
	String [] param1=paramStringGen.split(&quot;\\\&amp;&quot;);;
	try {		
		Runtime.getRuntime().exec(param1);
		Thread.sleep(1000);
		} catch (IOException e) {
			
			e.printStackTrace();
		}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">..\results\Summarize.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="用表格察看结果" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">..\results\Testing.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-保存结果-查询数据库" enabled="true">
        <stringProp name="TestPlan.comments">保存数据库查询结果</stringProp>
      </GenericController>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="生成数据库查询次数" enabled="true">
          <stringProp name="BeanShellSampler.query">System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.ctrip.automation.common.GetResultFromString;


String sqlString=vars.get(&quot;SQL&quot;).toString();
int sqlNum=0;
List sqlList=new ArrayList();
if(!sqlString.equals(&quot;&quot;))
{
sqlString=sqlString.substring(0,sqlString.length());
GetResultFromString stringToArray=new GetResultFromString();
String [] array=stringToArray.getArray(sqlString,&quot;\\\|&quot;);
sqlList=Arrays.asList(array);
sqlNum=sqlList.size();
}

vars.put(&quot;sqlNum&quot;,Integer.toString(sqlNum));
vars.putObject(&quot;sqlList&quot;,sqlList);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${sqlNum}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="计数器-生成数据库查询循环计数器" enabled="true">
            <stringProp name="BeanShellSampler.query"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label);


 
 //vars.put(&quot;sqlNum&quot;,Integer.toString(${sqlNum}-1));
 //vars.put(&quot;Counter&quot;,Integer.toString(${sqlNum}-1));
 vars.put(&quot;Counter&quot;,Integer.toString(${__counter(true,)}-1));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">FlightDB-${Environment}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">${__eval(${sqlTemp})}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">reserved</stringProp>
            <stringProp name="resultVariable">queryResult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="处理数据库查询请求参数" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">muserdb</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label+&quot;=====第${Counter}次循环&quot;);
import java.util.List;
import java.util.ArrayList;

List sqlListTemp=new ArrayList();
sqlListTemp=vars.getObject(&quot;sqlList&quot;);
sqlListTemp=${__eval(sqlListTemp)};
vars.put(&quot;sqlTemp&quot;,sqlListTemp.get(${Counter}));


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="保存数据库查询结果参数" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"> System.out.println(&quot;${TCNo.}------------当前脚本名称:===&quot;+Label+&quot;=====第${Counter}次循环&quot;);
import java.util.List;
import java.util.ArrayList;

List tempResult=new ArrayList();
tempResult=vars.getObject(&quot;dbResult&quot;);
tempResult.add(vars.getObject(&quot;queryResult&quot;));
vars.putObject(&quot;dbResult&quot;,tempResult);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
        <stringProp name="SwitchController.value">${TestName}</stringProp>
      </SwitchController>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="验证身份" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--验证身份-${TestPoint}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取公司信息" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取公司信息-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取公司ID-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{ &quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;GroupId&quot;:${GroupId},&quot;Source&quot;:&quot;${Source}&quot;,&quot;Company&quot;:&quot;${Company}&quot;,&quot;PageNo&quot;:${PageNo}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/QueryCompanies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;UTF-8&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;QueryCompaniesResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;QueryCompaniesResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;QueryCompaniesResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取结算信息" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{&quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;Start&quot;:&quot;${Start}&quot;,&quot;Days&quot;:&quot;${Days}&quot;,&quot;CorpId&quot;:&quot;${CorpId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/GetTransactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;GetTransactionsResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;GetTransactionsResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;GetTransactionsResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取订单信息(按订单返回数据)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取订单信息-按订单-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;UTF-8&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();
vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取订单信息-按订单-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{&quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;JourneyNo&quot;:&quot;${JourneyNo}&quot;}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/order.svc/rest/SearchOrder</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;UTF-8&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

System.out.println(&quot;--------------------------------&quot;);
System.out.println(responseMap.get(&quot;SearchOrderResult&quot;).get(&quot;ItineraryList&quot;).get(0).get(&quot;FlightOrderInfoList&quot;));
System.out.println(&quot;???????????????????????????&quot;);


if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取订单信息(按人乘返回数据)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;appKey&quot;:&quot;${appKey}&quot;,&quot;appSecurity&quot;:&quot;${appSecurity}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/platform.svc/rest/ticket</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
//String RespCode=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
//String RespDesc=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
//String RespStatus=responseMap.get(&quot;TicketResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();
String Ticket=responseMap.get(&quot;TicketResult&quot;).get(&quot;Ticket&quot;).toString();

vars.put(&quot;Ticket&quot;,Ticket);</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TCNo.}--获取结算信息-${TestPoint}-step2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;request&quot;:{&quot;Auth&quot;:{&quot;AppKey&quot;:&quot;${appKey}&quot;,&quot;Ticket&quot;:&quot;${Ticket}&quot;},&quot;JourneyNo&quot;:&quot;${JourneyNo}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__evalVar(${Environment})}</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/order.svc/rest//SearchOrderPerPerson</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.util.HashMap;
import com.ctrip.automation.result2map.JsonToHashMap;
import org.json.*;

HashMap responseMap=new HashMap();

String sampleResultString=new String(ResponseData,&quot;GB2312&quot;);
JsonToHashMap js=new JsonToHashMap();
responseMap=js.parserToMap(sampleResultString);
vars.putObject(&quot;responseMapTemp&quot;,responseMap);
String RespCode=responseMap.get(&quot;SearchOrderPerPersonResult&quot;).get(&quot;Status&quot;).get(&quot;ErrorCode&quot;).toString();
String RespDesc=responseMap.get(&quot;SearchOrderPerPersonResult&quot;).get(&quot;Status&quot;).get(&quot;Message&quot;).toString();
String RespStatus=responseMap.get(&quot;SearchOrderPerPersonResult&quot;).get(&quot;Status&quot;).get(&quot;Success&quot;).toString();

if(!RespCode.equals(&quot;${ErrorCode}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${ErrorCode}&quot;+&quot;  实际应答码是&quot;+RespCode;
}
if(!RespDesc.equals(&quot;${Message}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Message}&quot;+&quot;  实际应答码是&quot;+RespDesc;
}

if(!RespStatus.equals(&quot;${Success}&quot;))
{
   Failure=true;
   FailureMessage=&quot;期望应答码是:&quot;+&quot;${Success}&quot;+&quot;  实际应答码是&quot;+RespStatus;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
